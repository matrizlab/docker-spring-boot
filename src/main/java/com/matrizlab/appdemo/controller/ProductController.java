package com.matrizlab.appdemo.controller;

import com.matrizlab.appdemo.model.ProductModel;
import com.matrizlab.appdemo.repository.ProductRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api")
public class ProductController {

    @Autowired
    private ProductRepository productRepository;

    @GetMapping("/products")
    public List<ProductModel> getAllProducts() {
        return productRepository.findAll();
    }

    @GetMapping("/product/{id}")
    public ProductModel getProduct(@PathVariable String id) {
        return productRepository.findById(id).orElseThrow(() -> new RuntimeException("Cannot Find Product By ID: " + id));
    }

    @PostMapping("/product")
    public ResponseEntity<String> saveProduct(@RequestBody ProductModel product) {
        ProductModel savedProduct = productRepository.insert(product);//it will create new document in table with autogenerated id, if id exist than exception in is thrown
        URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(savedProduct.getId())
                .toUri();
        //http://localhost:8081/api/product/611b7bcfef59e87f2e0e0d60
        return ResponseEntity.created(uri).build();
    }

    @PutMapping("/product/{id}")//full update of all properties
    public ResponseEntity<ProductModel> updateProduct(@PathVariable String id, @RequestBody ProductModel product) {
        ProductModel imFromDB = productRepository.findById(id).orElseThrow(()->new RuntimeException("Cannot Find Product By ID: " + id));
        BeanUtils.copyProperties(product, imFromDB);//copy all data from product to imFromDB
        imFromDB = productRepository.save(imFromDB);//if request has id than it will update else it will insert new document with new autogenerated id
        return new ResponseEntity<>(imFromDB, HttpStatus.OK);
    }

    @PatchMapping("/product/{id}")//only update price keep other fields as old values
    public ResponseEntity<ProductModel> updateProductPrice(@PathVariable String id, @RequestBody ProductModel product) {
        ProductModel imFromDB = productRepository.findById(id).orElseThrow(()->new RuntimeException("Cannot Find Product By ID: " + id));
        imFromDB.setPrice(product.getPrice());
        imFromDB = productRepository.save(imFromDB);//if request has id than it will update else it will insert new document with new autogenerated id
        return new ResponseEntity<>(imFromDB, HttpStatus.OK);
    }

    @DeleteMapping("/product/{id}")
    public ResponseEntity<String> deleteProduct(@PathVariable String id) {
        productRepository.deleteById(id);
        return new ResponseEntity<>(id, HttpStatus.OK);
    }
}
